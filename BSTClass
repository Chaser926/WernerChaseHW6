public class Node
    {
        String key;
        Node left, right;
        int counter = 1;
         // Constructer
        public Node(String item)
        {
            key = item;
            left = right = null;
        }
        
        // Method to incremate counter
        public void counter()
        {
          counter++;
        }
        
        // Method to reutn the value of counter
        public int getCounter()
        {
          return counter;
        }
    }
Node search(String key)
    {
      if(search(root, key) == null)
      {
        JOptionPane.showMessageDialog(null, "'" +  key + "'" + " is not in the tree.");
      }
      
      else
      {
        JOptionPane.showMessageDialog(null, "'" + key + "'" + " was found");
      }
      
      return search(root, key);
    }
    
    //A recursive function to search for a key in BST
    Node search(Node r, String key)
    {
      //Search recursivly through the tree
     if(r.key.compareToIgnoreCase(key) < 0 && r.right != null)
     {
       return search(r.right, key);
     }
     
     else if(r.key.compareToIgnoreCase(key) > 0 && r.left != null)
     {
       return search(r.left, key);
     }
     
     //Return r if r and key equal 
     else if(r.key.equalsIgnoreCase(key))
     {
       return r;
     }
     
     //If key isn't found then null is returned
     else
     {
       return null;
     }
    }
void delete(String key)
    {
      root = delete(root, key);
    }
 
    //A recursive function to delete a key in BST 
    Node delete(Node root, String key)
    {
        //Base Case: If the tree is empty 
        if (root == null)  return root;
 
        //Otherwise, recur down the tree 
        if (key.compareToIgnoreCase(root.key) < 0)
            root.left = delete(root.left, key);
        else if (key.compareToIgnoreCase(root.key) > 0)
            root.right = delete(root.right, key);
 
        //if key is same as root's key, then This is the node
        //to be deleted
        else
        {
            //node with only one child or no child
            if (root.left == null)
                return root.right;
            else if (root.right == null)
                return root.left;
 
            //node with two children: Get the inorder successor (smallest
            //in the right subtree)
            root.key = minValue(root.right);
 
            //Delete the inorder successor
            root.right = delete(root.right, root.key);
        }
 
        return root;
    }
    //Finds the minValue in the BST
    String minValue(Node root)
    {
        String minv = root.key;
        while (root.left != null)
        {
            minv = root.left.key;
            root = root.left;
        }
        return minv;
    }
